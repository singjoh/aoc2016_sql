USE [aoc2016]
GO

/*


*/


set nocount on


 drop table if exists #raw
create table #raw (s varchar(8000))

--test data
/*
insert into #raw 
values 
('ULL'),
('RRDDD'),
('LURDL'),
('UUUUD')
--*/
-- real data
--/*
insert into #raw 
values 
('RLRLLLULULULUUDUULULRDDLURURDDLDUUDDLRDDUUUDDRUDLRRDDUDUUDULUDRDULRUDRULRDRUDLDDULRRDLDRLUDDLLDRDDDUDDLUDUDULDRLLDRLULRLURDLULRUUUDRULLUUDLRDLDDUDRRRLDLRUUURRLDDRRRURLLULDUULLDRLRDLLDURDLDDULLDDLDLUURRRURLRURLLRRDURLDUDDLULUUULULLLDRRRRRLULRDUDURURLULRURRRLLUURDURULRRUULDRDLULDLLUDLUDRLUDLRRLDLLDLDUDDLULLDRULRLRULDURRDLDLLUDRLLDRRDLDUDUURUURDUUDDDLDLDDRDLUDLDUUUUDLDRLRURDLURURDLLLUURURDRDLUDLLRUDULLLDLULLULLDLDDRDRRRUDDDUDDDDRULLLLRLDDLLRDRLLLRRLDRRUDRUUURLLLRULRRDURDLDRLDDUUDUUURRLRRUDLDLDDRUDLULLUUDUUUDLUDDRUULLLURUDDDDLRUDDLLLRUR'),
('LDLRLDDDLUDRDRRUDUURLRULLUDDRLURLUULDLLRLLUDLRLRUDLULRLRRLRURLDDDURUDUUURDRLDDLUUUDRUDUDDDLLURLLULRUULLUDRULUDDULDUDUDULLDRUUUULRDUUDLUDURDLLRLLRLUUDUUDRLLLRULUURUDLDRLLDUDLDDRULDULDURRLDDDUDUDDRUDUDRDURLLLLLULDRDDLLUDULLLUDRURLDLDLDULLDDRURRLUDDRLURLULRLDDDUUUURLRDLRURDDURLDLRRLLRLRLUURRLLDDLDRLRDUDDLLDDDURUUDURLRRDUULRRDDRRUULDRLRUDRRLDDRLDRULLDLDURRULDURRRDLRRLRLLLRLDRLLULRRLLLLLDLDDULDLLDLLDUUDDRLURUUUUULRDDLRDLRDRDRDLUDDLDDRULLUDDRLDLLUDRLUURRLUDURURLLRURRURRLRLLRLURURDDDDRRLURDUULLUU'),
('LLRRDURRDLDULRDUDLRDRDRURULDURUDRRURDDDRLDLDRDRDRDRULDUURLULDDUURUULUDULLDUDLLLLDLLLDRLUUULLULDDRRUDDULLLULRDRULDDULDUDRDDLUUURULDLLUDUUUUURUDLLDRDULLRULLDURDRLLDLDRDDURUULUDURRRUULLDUUDDURDURLDLRRLLDURDDLRRRUDLRRRDLDRLUDLUDRDRLDDLLLRLLRURDLRDUUUURRLULDDLDLLLUDRDRLRRDURDDLURDLDDDULLLRRLDDDRULDDDLRRDULUUUDRRULDDLLLURDRRLLLUULDRRRUURRDDLULDRLULDDDLDULDRRRULRULLURLURULLLLRUDRRRDRDRDLDULURLRRRRLRUDDRRRUURUURLLRURURUURRURRDLDLLUDRRRDUDDRDURLLRLRRULD'),
('DULRRDRLRLUDLLURURLLRLRDLLDLLDRDUURLRUUUDLLDUUDDUULDUULLRUDRURLUDRDLRUDDDLULUDLLDRULULLLDRRULDLLUURLRRRLDRDLDRURRRRDLRUUDULLRLLLDLRUDLDUUDRLDLRDRLRDLDDDUDLRUDLDDLLLDRLLRRUUDRDDUUURURRRUUDLRRDDRUDLDDULULDLRRLRDDUDRUURRUULURLURUDRRURRRULDDDDURDLUUULUULULRDLRRRRRURURRLRUULDUUURRDRRDLDUUUULLULLLLUDLUUDUURRDLDLRRRLUUURULDULDLDRLLURDRUULLLLLULLLDRURURRUDRRRRUDUDUDRUDUDRDRULUUDRURDDUUDLDLDUURUDURLRLRRDRDRDLLDUDDULLRDLDDRLLDLRDURDDULLLDLLLULDLUUUDLDRDLURUURDDLRDLLLLLRLURDLLLULLRRLU'),
('DUULULUUDUDLLRLRURULLDLRRLURDLLDUDUDDRURRLUDULULDRRDRLUULUDDLUURURDLDDDRDRUDURLDDLUDUURULRRUUDRLURRLRLDURRRULRLDDDRUDDDDDUDDULLLRRLLDULDRULUDLRRDLLUDRDLDULRLLLUULLRULRLLLLUDDRRDRLULDLDLURDDRUDDLDLDLDRULDLLDDUUDULUULULLURDURRLLUDRULLRDUDRDRURDRDRDURUUDULDDRURUDLLUUDUUDURDLRDRURUDRUURLUUURLRLUDRUDRUURLLUDRLURDDURRUDRDRLRRLDDDRDDLUUUDDLULDUURUDUDLLDRURDURRDULRLURRDLDDRLUDRLDLRLDDUURRULDDLDUDDLRDULLDDDLDUUUUDLRUDUDLDRDLRDDLDLRLLUDDRRLUDLDUUULLDDRLRRDLRRRRUDDLRLLULRLRDURDUDDRRULLDDLDLRRDLLULDURURDDURLRLULULURRUDUDRDLURULDUDLUULDUUURLLRUDLLRDLRUDRLULDUDRRDUUDUUULUUUDDRUD')
--*/

drop table if exists #data

;with cte_raw(rown,s) as
	(select row_number() over (order by (select null)) as rown, isnull(s,'')
	from #raw)
select rown line, id, item dir
into #data
from cte_raw r
outer apply (select * from dbo.fn_split(r.s,null)) as x

drop table if exists #buttons
create table #buttons (line int, button varchar(1))

declare @x int = 1, @y int = 1 -- 0,0 is top left (button 1), 1,0 is top mid (button 2) and 2,2 is then button 9
declare @line int = 0, @maxline int

select @maxline = max(line) from #data

while @line < @maxline
begin
	set @line += 1

	select	@x = @x + case when dir = 'L' and @x > 1 then -1 when dir = 'R' and @x < 3 then 1 else 0 end,
			@y = @y + case when dir = 'U' and @y > 1 then -1 when dir = 'D' and @y < 3 then 1 else 0 end
	from #data
	where line = @line
	order by id

	insert into #buttons values(@line, 3 * (@y - 1) + @x)
end

declare @part1 varchar(100) = ''

select @part1 = @part1 + cast(button as varchar(1)) from #buttons order by line
select @part1

/*
    1
  2 3 4
5 6 7 8 9
  A B C
    D
	*/

drop table if exists #next
create table #next (button varchar(1), dir varchar(1), nextbutton varchar(1))
-- add R/D movements
insert into #next
	values
	('2','R','3'),
	('3','R','4'),
	('5','R','6'),
	('6','R','7'),
	('7','R','8'),
	('8','R','9'),
	('A','R','B'),
	('B','R','C'),
	('1','D','3'),
	('2','D','6'),
	('3','D','7'),
	('4','D','8'),
	('6','D','A'),
	('7','D','B'),
	('8','D','C'),
	('B','D','D')

-- and the opposites
insert into #next
select nextbutton, case dir when 'D' then 'U' else 'L' end, button
from #next


declare @button varchar(1) = '5'
declare @id int, @maxid int

-- part2, reset points
set @line = 0
truncate table #buttons

while @line < @maxline
begin
	set @line += 1

	select @id = 0, @maxid = max(id) from #data where line = @line

	while @id < @maxid
	begin

		set @id += 1

		select @button = isnull(nextbutton,@button) 
		from #data d
		left join #next n
			on n.button = @button
			and n.dir = d.dir
		where line = @line
		and id = @id

	end

	insert into #buttons values(@line, @button)
end

declare @part2 varchar(100) = ''

select @part2 = @part2 + cast(button as varchar(1)) from #buttons order by line
select @part2